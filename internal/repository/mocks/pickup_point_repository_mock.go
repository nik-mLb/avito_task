// Code generated by MockGen. DO NOT EDIT.
// Source: pickup_point.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nik-mLb/avito_task/internal/models/pickup_point"
	dto "github.com/nik-mLb/avito_task/internal/transport/dto"
)

// MockPickupPointRepository is a mock of PickupPointRepository interface.
type MockPickupPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPickupPointRepositoryMockRecorder
}

// MockPickupPointRepositoryMockRecorder is the mock recorder for MockPickupPointRepository.
type MockPickupPointRepositoryMockRecorder struct {
	mock *MockPickupPointRepository
}

// NewMockPickupPointRepository creates a new mock instance.
func NewMockPickupPointRepository(ctrl *gomock.Controller) *MockPickupPointRepository {
	mock := &MockPickupPointRepository{ctrl: ctrl}
	mock.recorder = &MockPickupPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickupPointRepository) EXPECT() *MockPickupPointRepositoryMockRecorder {
	return m.recorder
}

// CreatePickupPoint mocks base method.
func (m *MockPickupPointRepository) CreatePickupPoint(ctx context.Context, city string) (*models.PickupPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePickupPoint", ctx, city)
	ret0, _ := ret[0].(*models.PickupPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePickupPoint indicates an expected call of CreatePickupPoint.
func (mr *MockPickupPointRepositoryMockRecorder) CreatePickupPoint(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePickupPoint", reflect.TypeOf((*MockPickupPointRepository)(nil).CreatePickupPoint), ctx, city)
}

// GetPickupPointsWithReceptions mocks base method.
func (m *MockPickupPointRepository) GetPickupPointsWithReceptions(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]dto.PickupPointListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickupPointsWithReceptions", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]dto.PickupPointListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickupPointsWithReceptions indicates an expected call of GetPickupPointsWithReceptions.
func (mr *MockPickupPointRepositoryMockRecorder) GetPickupPointsWithReceptions(ctx, startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickupPointsWithReceptions", reflect.TypeOf((*MockPickupPointRepository)(nil).GetPickupPointsWithReceptions), ctx, startDate, endDate, page, limit)
}
